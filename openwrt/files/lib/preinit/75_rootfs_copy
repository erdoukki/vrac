#!/bin/sh
# Copyright (C) 2020 OpenWrt.org
# Copyright (C) 2020 G.KERMA - Gandalf(at)Gk2(dot)net
# v007
# 
# dependencies : mount-utils partx-utils block-mount fdisk

. /lib/functions.sh
. /lib/upgrade/common.sh

rootfs_premount_init() {
	local boot_partdev
	local root_partdev
	local reset_needed
	local reset_progress

	DISK=/dev/mmcblk0
	DEVICE=${DISK}p3

	reset_needed=false
	reset_progress=false

	if [ ! -f `which fdisk` ]; then
		echo "missing fdisk !"
		exit 1
	fi
	# Test root fs reset needed
	echo "Test root fs reset needed..."
	if export_bootdevice && export_partdevice boot_partdev 1; then
		mkdir -p /boot
		mount -o rw,noatime "/dev/$boot_partdev" /boot
		[ ! -f /boot/rootfs.ready ] && reset_needed=true
		[ -f /boot/rootfs.reset ] && reset_progress=true
		umount /boot
	fi

	if $reset_needed ; then 
		# Reset root fs is needed
		echo "Reset root fs is needed !"
		if [ $reset_progress ]; then
			echo "Reset root fs is in progress !"
			if [ ! -b ${DEVICE} ]; then
				# Add root fs before mount root
				echo "Add root fs on ${DEVICE}"
				yes | fdisk -u ${DISK} <<EOF
n
p
3


w
EOF
			partx -d - ${DEVICE}
			partx -a - ${DEVICE}
			fi
		fi
		if [ -b ${DEVICE} ]; then
			echo "Prepare root fs on ${DEVICE}"
			yes | mkfs.ext4 ${DEVICE}
	
			# Copy root fs before mount root
			echo "Copy root fs on ${DEVICE}"
			mkdir -p /tmp/cproot
			mount --bind / /tmp/cproot
			mkdir /tmp/rootfs
			mount ${DEVICE} /tmp/rootfs
			if mountpoint -q /tmp/rootfs ; then
				tar -C /tmp/cproot -cf - . | tar -C /tmp/rootfs -xf -
				sync
				umount /tmp/cproot
			
				# Configure root fs before mount root
				echo "Configure root fs on ${DEVICE}"
				
				## FIXME : TODO uci
											
								##config mount
				##	option enabled '1'
				##	option enabled_fsck '1'
				##	option target '/'
				##	option device '${DEVICE}'
	
				eval $(block info "${DEVICE}" | grep -o -e "UUID=\S*")

				uci -q delete fstab.rootfs
				uci set fstab.rootfs="mount"
				uci set fstab.rootfs.uuid="${UUID}"
				## uci set fstab.rootfs.device="${DEVICE}"
				uci set fstab.rootfs.target="/"
				uci set fstab.rootfs.enabled="1"                                                                                                       
				uci set fstab.rootfs.enabled_fsck="1"
				uci commit fstab
	
				# Activate root fs before mount root
				echo "Activate root fs on ${DEVICE}"
				/etc/init.d/fstab enable
			fi
			rmdir /tmp/cproot
			umount /tmp/rootfs
			rmdir /tmp/rootfs
			if export_bootdevice && export_partdevice boot_partdev 1; then
				# Flag root fs reset done
				echo "Flag root fs reset done..."
				mkdir -p /boot
				mount -o rw,noatime "/dev/$boot_partdev" /boot
				[ ! -f /boot/rootfs.ready ] && touch /boot/rootfs.ready
				[ -f /boot/rootfs.reset ] && rm /boot/rootfs.reset
				[ -f /boot/rootfs.done ] && rm /boot/rootfs.done
				umount /boot
			fi
		else
			# Reset root fs is needed
			echo "Test root fs reset in progress..."
			if export_bootdevice && export_partdevice boot_partdev 1; then
				mkdir -p /boot
				mount -o rw,noatime "/dev/$boot_partdev" /boot
				if [ ! -f /boot/rootfs.reset ]; then
					# Flag root fs reset progress
					echo "Flag root fs reset progress..."
					touch /boot/rootfs.reset
				fi
				umount /boot
				sync
			fi
			echo "We need a reboot !"
			reboot -n
		fi
	fi
}

rootfs_postmount_init() {
	local boot_partdev
	local root_partdev
	local rom_partdev

	# Test root fs reset needed
	echo "Test root fs reset still needed..."
	if export_bootdevice && export_partdevice boot_partdev 1; then
		mkdir -p /boot
		mount -o rw,noatime "/dev/$boot_partdev" /boot
		if [ ! -f /boot/rootfs.reset ]; then
			if [ -f /boot/rootfs.ready ]; then
				if [ -f "/etc/init.d/update_refresh" ]; then
					if [ ! -f /rootfs.done ]; then
						# Activate Update Refresh
						echo "Activate Update Refresh"
						/etc/init.d/update_refresh enable
					fi
				fi
				# Flag root fs reset complete
				echo "Flag root fs reset complete..."
				touch /rootfs.ready
			fi
		fi
		umount /boot
	fi
}

boot_hook_add preinit_main rootfs_premount_init
boot_hook_add preinit_mount_root rootfs_postmount_init

